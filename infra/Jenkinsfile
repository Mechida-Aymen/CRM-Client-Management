pipeline {
    agent {
        docker {
            image 'mechaymen/symfony-builder'
            args '-u root -v /var/run/docker.sock:/var/run/docker.sock'

        }
    }

    environment {
        DOCKERHUB_CREDENTIALS = credentials('DOCKER_CREDENTIALS')
        DOCKER_CONFIG = '/tmp/.docker'  
        NGINX_NAME = 'nginx'
        SYMFONY_NAME = 'symfony'
        NGINX_VERSION = '1.0'
        SYMFONY_VERSION = '1.0'
    }

    stages {

        /*stage('SonarQube Analysis') {
            steps {
                withCredentials([string(credentialsId: 'sonar-symfony', variable: 'SONAR_TOKEN')]) {
                    sh """
                        sonar-scanner \
                            -Dsonar.projectKey=Symfony-devops \
                            -Dsonar.sources=./code \
                            -Dsonar.host.url=http://99.0.2.4:9000 \
                            -Dsonar.token=sqp_5636775e8a7de543b042cecdf9523fa7b5c6a320
                    """
                }
            }
        }*/

       
        stage('Docker Build') {
            steps {
                script {
                    echo 'images build ...'
                    sh "docker build -t ${NGINX_NAME}:${NGINX_VERSION} -f infra/nginx/Dockerfile ."
                    sh """
                    cd code 
                    docker build -t ${SYMFONY_NAME}:${SYMFONY_VERSION} -f Dockerfile .
                    """
                }
            }
        }

        stage('Docker Push') {
            steps {
                script {
                    
                    withCredentials([usernamePassword(credentialsId: 'DOCKER_CREDENTIALS', passwordVariable: 'dockerHubPassword', usernameVariable: 'dockerHubUser')]) {
                        sh """
                            echo ${env.dockerHubPassword} | docker login -u ${env.dockerHubUser} --password-stdin
                            docker tag ${SYMFONY_NAME}:${SYMFONY_VERSION} ${env.dockerHubUser}/${SYMFONY_NAME}:${SYMFONY_VERSION}
                            docker tag ${NGINX_NAME}:${NGINX_VERSION} ${env.dockerHubUser}/${NGINX_NAME}:${NGINX_VERSION}                            
                            docker push ${env.dockerHubUser}/${SYMFONY_NAME}:${SYMFONY_VERSION}
                            docker push ${env.dockerHubUser}/${NGINX_NAME}:${NGINX_VERSION}
                        """
                    }
                }
            }
        }

        stage('Ansible Deploy') {
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'SSH_PASSWORD', variable: 'SUDO_PASS'),
                        usernamePassword(credentialsId: 'DOCKER_CREDENTIALS', usernameVariable: 'DOCKERHUB_USER', passwordVariable: 'DOCKERHUB_PASS')
                    ]) {
                        sh '''
                            if [ ! -f ~/.ssh/id_rsa ]; then
                                ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -N ""
                            fi
                        '''

                        sh '''
                            sudo apt update
                            sudo apt install sshpass
                            sshpass -p "$SUDO_PASS" ssh-copy-id -o StrictHostKeyChecking=no aymen@99.0.2.4
                        '''

                        sh '''
                            pwd
                            cd infra/Ansible
                            ansible-playbook -i inventory.ini deploy.yml \
                                --private-key=~/.ssh/id_rsa \
                                -e "ansible_become_pass=${SUDO_PASS} \
                                    nginx_name=${NGINX_NAME} \
                                    symfony_name=${SYMFONY_NAME} \
                                    nginx_version=${NGINX_VERSION} \
                                    symfony_version=${SYMFONY_VERSION} \
                                    dockerhub_username=${DOCKERHUB_USER} \
                                    dockerhub_password=${DOCKERHUB_PASS}"
                        '''
                    }
                }
            }
        }
        
    }
}
